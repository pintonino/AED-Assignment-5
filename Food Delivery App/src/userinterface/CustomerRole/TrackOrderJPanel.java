/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Order;
import Business.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ninoshka
 */
public class TrackOrderJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private EcoSystem business;
    
    public TrackOrderJPanel(JPanel userProcessContainer, 
            UserAccount account, 
            Organization organization, 
            Enterprise enterprise, 
            EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business=business;
       populateCurrentOrdersTable();
       populateOrderHistoryTable();
    }

    public void populateCurrentOrdersTable(){
        DefaultTableModel dtm = (DefaultTableModel) CurrentOrdersTable.getModel();
        dtm.setRowCount(0);
        for(Order o:business.getOrderDirectory().getOrderList())
        {
         if(o.getCustomerUserName()!=null&&o.getCustomerUserName().equals(userAccount.getUsername()) && (!o.getStatus().equalsIgnoreCase("cancelled")) && !(o.getStatus().equals("order received")))
         {
            Object row[] = new Object[5];
            row[0] = o;
            row[1] = o.getCustomerName();
             row[2] = o.getCustomerNotes();
            row[3] = o.getStatus();
            row[4] = o.getRestaurantName();
            dtm.addRow(row);
        }
    
        }
    }
    
     public void populateOrderHistoryTable(){
        DefaultTableModel dtm = (DefaultTableModel) orderHistoryTable.getModel();
        dtm.setRowCount(0);
        for(Order o:business.getOrderDirectory().getOrderList())
        {
         if(o.getCustomerUserName()!=null&&o.getCustomerUserName().equals(userAccount.getUsername()) && (o.getStatus().equals("order received") || o.getStatus().equalsIgnoreCase("cancelled") ))
         {
            Object row[] = new Object[5];
            row[0] = o;
            row[1] = o.getCustomerName();
             row[2] = o.getCustomerNotes();
            row[3] = o.getStatus();
            row[4] = o.getRestaurantName();
            dtm.addRow(row);
        }
    
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderHistoryTable = new javax.swing.JTable();
        cancelOrderBtn = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        CurrentOrdersTable = new javax.swing.JTable();
        feedbackBtn = new javax.swing.JButton();
        feedbackTxt = new javax.swing.JTextField();
        ConfirmReceviedOrderBtn = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        enterpriseLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 153, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        orderHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Id", "Customer Name", "Customer Message", "Status", "Restaurant Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderHistoryTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 290, 950, 96));

        cancelOrderBtn.setBackground(new java.awt.Color(255, 255, 255));
        cancelOrderBtn.setText("Cancel Order");
        cancelOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderBtnActionPerformed(evt);
            }
        });
        add(cancelOrderBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 210, -1, 40));

        btnBack.setBackground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<- Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        CurrentOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Id", "Customer Name", "Customer Message", "Status", "Restaurant Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(CurrentOrdersTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 950, 96));

        feedbackBtn.setBackground(new java.awt.Color(255, 255, 255));
        feedbackBtn.setText("Provide feedback");
        feedbackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackBtnActionPerformed(evt);
            }
        });
        add(feedbackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 400, -1, 50));
        add(feedbackTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 410, 490, -1));

        ConfirmReceviedOrderBtn.setBackground(new java.awt.Color(255, 255, 255));
        ConfirmReceviedOrderBtn.setText("Confirm Received");
        ConfirmReceviedOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmReceviedOrderBtnActionPerformed(evt);
            }
        });
        add(ConfirmReceviedOrderBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 210, -1, 40));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("Order History:");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 260, -1, -1));

        enterpriseLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel1.setText("Current Orders:");
        add(enterpriseLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void cancelOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderBtnActionPerformed
        // TODO add your handling code here:
         int selectedRow = CurrentOrdersTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        else{
        Order o = (Order)CurrentOrdersTable.getValueAt(selectedRow,0 );        
        business.getOrderDirectory().deleteOrder(o);
        JOptionPane.showMessageDialog(null, "Order deleted successfully");
       populateCurrentOrdersTable();
        }
    }//GEN-LAST:event_cancelOrderBtnActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        userProcessContainer.remove(this);
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void feedbackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackBtnActionPerformed
        // TODO add your handling code here:
         int selectedRow = orderHistoryTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        else{
        Order o = (Order)orderHistoryTable.getValueAt(selectedRow,0 );
       /* if(o.getFeedback().equals("")||o.getFeedback()==null){
              JOptionPane.showMessageDialog(null, "Feedback already provided for this order.!");
            return;
        }*/
        if(feedbackTxt.getText().equals("")){
        JOptionPane.showMessageDialog(null, "Feedback cannot be empty");
            return;
        }
        o.setFeedback(feedbackTxt.getText());
         JOptionPane.showMessageDialog(null, "Thank you for your feedback.!");
        }
    }//GEN-LAST:event_feedbackBtnActionPerformed

    private void ConfirmReceviedOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmReceviedOrderBtnActionPerformed
        // TODO add your handling code here:
         int selectedRow = CurrentOrdersTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        Order o = (Order)CurrentOrdersTable.getValueAt(selectedRow,0 );
         if (!o.getStatus().equals("delivered")) {
            JOptionPane.showMessageDialog(null, "This order is not yet delivered by us..!");
            return;
        }
        o.setStatus("order received");
        
       populateCurrentOrdersTable();
       populateOrderHistoryTable();
        
    }//GEN-LAST:event_ConfirmReceviedOrderBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConfirmReceviedOrderBtn;
    private javax.swing.JTable CurrentOrdersTable;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton cancelOrderBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JButton feedbackBtn;
    private javax.swing.JTextField feedbackTxt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderHistoryTable;
    // End of variables declaration//GEN-END:variables
}
